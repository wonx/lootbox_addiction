/home/ubuntu/miniconda3/bin/python3: can't open file '/home/ubuntu/rclone_union_drive/jupyternotebooks/lootbox_addiction/processed_dataframes/generate_df_purchases_value.py': [Errno 2] No such file or directory
^CImporting dataframes...
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1617863 entries, 0 to 1642462
Data columns (total 6 columns):
 #   Column     Non-Null Count    Dtype 
---  ------     --------------    ----- 
 0   datetime   1617863 non-null  object
 1   timestamp  1617863 non-null  int64 
 2   user       1617863 non-null  object
 3   src        1617863 non-null  object
 4   out        1617863 non-null  object
 5   time       1617863 non-null  int64 
dtypes: int64(2), object(4)
memory usage: 86.4+ MB
None
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1617059 entries, 0 to 1617058
Data columns (total 16 columns):
 #   Column       Non-Null Count    Dtype         
---  ------       --------------    -----         
 0   datetime_zh  1617059 non-null  datetime64[ns]
 1   timestamp    1617059 non-null  int64         
 2   user         1617059 non-null  object        
 3   src          1617059 non-null  object        
 4   src_en       1598008 non-null  object        
 5   src_type     1569532 non-null  object        
 6   src_value    1568484 non-null  float64       
 7   out          1617059 non-null  object        
 8   out_1_nopar  1617059 non-null  object        
 9   out_1_par    1617059 non-null  object        
 10  out_2_nopar  1617059 non-null  object        
 11  out_2_par_1  1617059 non-null  object        
 12  out_2_par_2  1617059 non-null  object        
 13  out_3        1617059 non-null  object        
 14  out_type     1617059 non-null  object        
 15  out_value    1579199 non-null  object        
dtypes: datetime64[ns](1), float64(1), int64(1), object(13)
memory usage: 197.4+ MB
None

Extracting new rows from df_purchases
(800, 6)
  execution time: 19.466835975646973 seconds

Parsing new rows
                    datetime   timestamp        user                     src                        out        time
1617063  2023-02-17 21:19:32  1676668772  SE***-92PC                 命悬一线武器箱               SG 553 | 阿罗哈  1676668772
1617064  2023-02-17 21:19:33  1676668773  S5***-7DGC        2020 RMR 竞争组战队胶囊       印花 | Boom | 2020 RMR  1676668773
1617065  2023-02-17 21:19:33  1676668773  AW***-ENTL  2022年里约热内卢锦标赛传奇组亲笔签名胶囊  印花 | rain | 2022年里约热内卢锦标赛  1676668773
1617066  2023-02-17 21:19:34  1676668774  S2***-YMZA                   手套武器箱                加利尔 AR | 黑砂  1676668774
1617067  2023-02-17 21:19:36  1676668776  SE***-92PC                 命悬一线武器箱                UMP-45 | 白狼  1676668776
Are the 'timestamp' and 'time' columns equal? True
          datetime_zh   timestamp        user                     src                        out out_1_nopar out_1_par out_2_nopar out_2_par_1 out_2_par_2           out_3
0 2023-02-18 05:19:32  1676668772  SE***-92PC                 命悬一线武器箱               SG 553 | 阿罗哈     SG 553                    阿罗哈                                        
1 2023-02-18 05:19:33  1676668773  S5***-7DGC        2020 RMR 竞争组战队胶囊       印花 | Boom | 2020 RMR         印花                  Boom                                 2020 RMR
2 2023-02-18 05:19:33  1676668773  AW***-ENTL  2022年里约热内卢锦标赛传奇组亲笔签名胶囊  印花 | rain | 2022年里约热内卢锦标赛         印花                  rain                            2022年里约热内卢锦标赛
3 2023-02-18 05:19:34  1676668774  S2***-YMZA                   手套武器箱                加利尔 AR | 黑砂     加利尔 AR                     黑砂                                        
4 2023-02-18 05:19:36  1676668776  SE***-92PC                 命悬一线武器箱                UMP-45 | 白狼     UMP-45                     白狼                                        
  execution time: 0.040732622146606445 seconds

Filling new rows with data from df_src (src_en, src_type and src_value)
  execution time: 0.013772726058959961 seconds

Filling new rows with data from df_out
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 800 entries, 0 to 799
Data columns (total 14 columns):
 #   Column       Non-Null Count  Dtype         
---  ------       --------------  -----         
 0   datetime_zh  800 non-null    datetime64[ns]
 1   timestamp    800 non-null    int64         
 2   user         800 non-null    object        
 3   src          800 non-null    object        
 4   src_en       657 non-null    object        
 5   src_type     645 non-null    object        
 6   src_value    642 non-null    float64       
 7   out          800 non-null    object        
 8   out_1_nopar  800 non-null    object        
 9   out_1_par    800 non-null    object        
 10  out_2_nopar  800 non-null    object        
 11  out_2_par_1  800 non-null    object        
 12  out_2_par_2  800 non-null    object        
 13  out_3        800 non-null    object        
dtypes: datetime64[ns](1), float64(1), int64(1), object(11)
memory usage: 87.6+ KB
None
  0%|                                                                                                                                                                                                                                                                                               | 0/800 [00:00<?, ?it/s]  2%|█████▉                                                                                                                                                                                                                                                                               | 17/800 [00:00<00:04, 163.31it/s]  5%|██████████████▏                                                                                                                                                                                                                                                                      | 41/800 [00:00<00:03, 203.06it/s]  8%|██████████████████████▌                                                                                                                                                                                                                                                              | 65/800 [00:00<00:03, 216.46it/s] 11%|██████████████████████████████▊                                                                                                                                                                                                                                                      | 89/800 [00:00<00:03, 223.54it/s] 14%|██████████████████████████████████████▉                                                                                                                                                                                                                                             | 113/800 [00:00<00:03, 227.41it/s] 17%|███████████████████████████████████████████████▎                                                                                                                                                                                                                                    | 137/800 [00:00<00:02, 230.88it/s] 20%|███████████████████████████████████████████████████████▌                                                                                                                                                                                                                            | 161/800 [00:00<00:02, 232.58it/s] 23%|███████████████████████████████████████████████████████████████▊                                                                                                                                                                                                                    | 185/800 [00:00<00:02, 233.79it/s] 26%|████████████████████████████████████████████████████████████████████████                                                                                                                                                                                                            | 209/800 [00:00<00:02, 233.26it/s] 29%|████████████████████████████████████████████████████████████████████████████████▍                                                                                                                                                                                                   | 233/800 [00:01<00:02, 234.04it/s] 32%|████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                                                                                                           | 257/800 [00:01<00:02, 233.22it/s] 35%|████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                                                                                                   | 281/800 [00:01<00:02, 233.26it/s] 38%|█████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                                                                          | 305/800 [00:01<00:02, 232.65it/s] 41%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                                                                                                                  | 329/800 [00:01<00:02, 231.78it/s] 44%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                                                                                          | 353/800 [00:01<00:01, 233.34it/s] 47%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                                                                                  | 377/800 [00:01<00:01, 234.26it/s] 50%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                                                                                         | 401/800 [00:01<00:01, 233.82it/s] 53%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                                                 | 425/800 [00:01<00:01, 232.94it/s] 56%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                                                                                                         | 449/800 [00:01<00:01, 230.14it/s] 59%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                                                                | 473/800 [00:02<00:01, 231.02it/s] 62%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                                                                        | 497/800 [00:02<00:01, 232.97it/s] 65%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                                                | 521/800 [00:02<00:01, 234.61it/s] 68%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                                                                        | 545/800 [00:02<00:01, 235.08it/s] 71%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                               | 569/800 [00:02<00:01, 218.41it/s] 74%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                       | 593/800 [00:02<00:00, 222.97it/s] 77%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                               | 617/800 [00:02<00:00, 226.48it/s] 80%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▍                                                      | 642/800 [00:02<00:00, 231.14it/s] 83%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                              | 666/800 [00:02<00:00, 233.16it/s] 86%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████                                      | 690/800 [00:03<00:00, 233.37it/s] 89%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                             | 714/800 [00:03<00:00, 234.82it/s] 92%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                     | 738/800 [00:03<00:00, 235.67it/s] 95%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉             | 762/800 [00:03<00:00, 233.23it/s] 98%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏    | 786/800 [00:03<00:00, 230.64it/s]100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 800/800 [00:03<00:00, 227.75it/s]
  execution time: 3.5179319381713867 seconds

Adding missing prices manually from dict
Valid new data % 82.5
Valid values old data % 97.65871251450936

Concatenating new rows to df_purchases_value
(1617859, 16)

Saving df_purchases_value to pickle
All done!
Importing dataframes...
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1617863 entries, 0 to 1642462
Data columns (total 6 columns):
 #   Column     Non-Null Count    Dtype 
---  ------     --------------    ----- 
 0   datetime   1617863 non-null  object
 1   timestamp  1617863 non-null  int64 
 2   user       1617863 non-null  object
 3   src        1617863 non-null  object
 4   out        1617863 non-null  object
 5   time       1617863 non-null  int64 
dtypes: int64(2), object(4)
memory usage: 86.4+ MB
None
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1617859 entries, 0 to 1617858
Data columns (total 16 columns):
 #   Column       Non-Null Count    Dtype         
---  ------       --------------    -----         
 0   datetime_zh  1617859 non-null  datetime64[ns]
 1   timestamp    1617859 non-null  int64         
 2   user         1617859 non-null  object        
 3   src          1617859 non-null  object        
 4   src_en       1598665 non-null  object        
 5   src_type     1570177 non-null  object        
 6   src_value    1569126 non-null  float64       
 7   out          1617859 non-null  object        
 8   out_1_nopar  1617859 non-null  object        
 9   out_1_par    1617859 non-null  object        
 10  out_2_nopar  1617859 non-null  object        
 11  out_2_par_1  1617859 non-null  object        
 12  out_2_par_2  1617859 non-null  object        
 13  out_3        1617859 non-null  object        
 14  out_type     1617859 non-null  object        
 15  out_value    1579859 non-null  object        
dtypes: datetime64[ns](1), float64(1), int64(1), object(13)
memory usage: 197.5+ MB
None

Extracting new rows from df_purchases
(0, 6)
  execution time: 19.698317289352417 seconds

Parsing new rows
No new lines to process, exiting.
All done!
Importing dataframes...
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1618063 entries, 0 to 1642862
Data columns (total 6 columns):
 #   Column     Non-Null Count    Dtype 
---  ------     --------------    ----- 
 0   datetime   1618063 non-null  object
 1   timestamp  1618063 non-null  int64 
 2   user       1618063 non-null  object
 3   src        1618063 non-null  object
 4   out        1618063 non-null  object
 5   time       1618063 non-null  int64 
dtypes: int64(2), object(4)
memory usage: 86.4+ MB
None
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1617859 entries, 0 to 1617858
Data columns (total 16 columns):
 #   Column       Non-Null Count    Dtype         
---  ------       --------------    -----         
 0   datetime_zh  1617859 non-null  datetime64[ns]
 1   timestamp    1617859 non-null  int64         
 2   user         1617859 non-null  object        
 3   src          1617859 non-null  object        
 4   src_en       1598665 non-null  object        
 5   src_type     1570177 non-null  object        
 6   src_value    1569126 non-null  float64       
 7   out          1617859 non-null  object        
 8   out_1_nopar  1617859 non-null  object        
 9   out_1_par    1617859 non-null  object        
 10  out_2_nopar  1617859 non-null  object        
 11  out_2_par_1  1617859 non-null  object        
 12  out_2_par_2  1617859 non-null  object        
 13  out_3        1617859 non-null  object        
 14  out_type     1617859 non-null  object        
 15  out_value    1579859 non-null  object        
dtypes: datetime64[ns](1), float64(1), int64(1), object(13)
memory usage: 197.5+ MB
None

Extracting new rows from df_purchases
(200, 6)
  execution time: 19.42228937149048 seconds

Parsing new rows
                    datetime   timestamp        user                   src                                out        time
1642663  2023-02-17 21:56:54  1676671014  AY***-YZBC                间谍印花胶囊                           印花 | 闪电猫  1676671014
1642664  2023-02-17 21:56:59  1676671019  A6***-7DAA  2022年里约热内卢锦标赛竞争组印花胶囊  印花 | Outsiders（闪耀）| 2022年里约热内卢锦标赛  1676671019
1642665  2023-02-17 21:57:01  1676671021  AY***-YZBC                间谍印花胶囊                            印花 | 吊打  1676671021
1642666  2023-02-17 21:57:06  1676671026  SC***-Z4QN                间谍印花胶囊                          印花 | 小T快润  1676671026
1642667  2023-02-17 21:57:08  1676671028  S5***-YTSG                地平线武器箱                         双持贝瑞塔 | 碎片  1676671028
Are the 'timestamp' and 'time' columns equal? True
          datetime_zh   timestamp        user                   src                                out out_1_nopar out_1_par out_2_nopar out_2_par_1 out_2_par_2           out_3
0 2023-02-18 05:56:54  1676671014  AY***-YZBC                间谍印花胶囊                           印花 | 闪电猫         印花                    闪电猫                                        
1 2023-02-18 05:56:59  1676671019  A6***-7DAA  2022年里约热内卢锦标赛竞争组印花胶囊  印花 | Outsiders（闪耀）| 2022年里约热内卢锦标赛         印花              Outsiders                           2022年里约热内卢锦标赛
2 2023-02-18 05:57:01  1676671021  AY***-YZBC                间谍印花胶囊                            印花 | 吊打         印花                     吊打                                        
3 2023-02-18 05:57:06  1676671026  SC***-Z4QN                间谍印花胶囊                          印花 | 小T快润         印花                   小T快润                                        
4 2023-02-18 05:57:08  1676671028  S5***-YTSG                地平线武器箱                         双持贝瑞塔 | 碎片      双持贝瑞塔                     碎片                                        
  execution time: 0.036537885665893555 seconds

Filling new rows with data from df_src (src_en, src_type and src_value)
  execution time: 0.011350154876708984 seconds

Filling new rows with data from df_out
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 200 entries, 0 to 199
Data columns (total 14 columns):
 #   Column       Non-Null Count  Dtype         
---  ------       --------------  -----         
 0   datetime_zh  200 non-null    datetime64[ns]
 1   timestamp    200 non-null    int64         
 2   user         200 non-null    object        
 3   src          200 non-null    object        
 4   src_en       130 non-null    object        
 5   src_type     130 non-null    object        
 6   src_value    130 non-null    float64       
 7   out          200 non-null    object        
 8   out_1_nopar  200 non-null    object        
 9   out_1_par    200 non-null    object        
 10  out_2_nopar  200 non-null    object        
 11  out_2_par_1  200 non-null    object        
 12  out_2_par_2  200 non-null    object        
 13  out_3        200 non-null    object        
dtypes: datetime64[ns](1), float64(1), int64(1), object(11)
memory usage: 22.0+ KB
None
  0%|                                                                                                                                                                                                               | 0/200 [00:00<?, ?it/s]  8%|████████████████▋                                                                                                                                                                                    | 17/200 [00:00<00:01, 162.74it/s] 20%|████████████████████████████████████████▍                                                                                                                                                            | 41/200 [00:00<00:00, 203.11it/s] 32%|████████████████████████████████████████████████████████████████                                                                                                                                     | 65/200 [00:00<00:00, 218.10it/s] 44%|██████████████████████████████████████████████████████████████████████████████████████▋                                                                                                              | 88/200 [00:00<00:00, 221.69it/s] 56%|████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                                                                       | 111/200 [00:00<00:00, 222.62it/s] 67%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                                                                | 134/200 [00:00<00:00, 224.11it/s] 79%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                                         | 158/200 [00:00<00:00, 227.37it/s] 91%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                 | 182/200 [00:00<00:00, 229.32it/s]100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 200/200 [00:00<00:00, 220.12it/s]
  execution time: 0.9137039184570312 seconds

Adding missing prices manually from dict
Valid new data % 60.0
Valid values old data % 97.65121682421027

Concatenating new rows to df_purchases_value
(1618059, 16)

Saving df_purchases_value to pickle
All done!
